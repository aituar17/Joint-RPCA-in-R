---
title: "Joint RPCA Reproducible Example"
format: html
editor: visual
---

```{r}
options(warn = -1)
# Load user-defined functions
source("../R/joint_rpca.R")
source("../R/joint_rpca_mae.R")
source("../R/joint_optspace_helper.R")
source("../R/joint_optspace_solve.R")
source("../R/optspace_helper.R")
source("../R/transform_helper.R")
source("../R/transform.R")
source("../R/mask_value_only.R")
source("../R/rpca_table_processing.R")
source("../R/joint_rpca_utils.R")

# TESTING THE JOINT RPCA FUNCTION ON SYNTHETIC DATA

#set up synthetic data
set.seed(123)

#create shared samples
samples <- paste0("Sample", 1:10)
features1 <- paste0("F1_", 1:8)
features2 <- paste0("F2_", 1:10)
features3 <- paste0("F3_", 1:6)

#generate three synthetic tables
table1 <- matrix(rpois(80, lambda = 25), nrow = length(features1),
                 dimnames = list(features1, samples))
table2 <- matrix(rpois(100, lambda = 30), nrow = length(features2),
                 dimnames = list(features2, samples))
table3 <- matrix(rpois(60, lambda = 35), nrow = length(features3),
                 dimnames = list(features3, samples))

#introduce a few NAs
table1[sample(length(table1), 5)] <- NA
table2[sample(length(table2), 6)] <- NA
table3[sample(length(table3), 4)] <- NA

#sample metadata with train/test split
metadata <- data.frame(Set = c(rep("train", 7), rep("test", 3)),
                       row.names = samples)

#bundle the tables
tables <- list(table1, table2, table3)

#run jointRPCA
result <- jointRPCA(
  tables = tables,
  n.components = 2,
  n.test.samples = 3,
  sample.metadata = metadata,
  train.test.column = "Set",
  rclr.transform.tables = TRUE,
  min.sample.count = 0,
  min.feature.count = 0,
  min.feature.frequency = 0,
  max.iterations = 5
)

#view results
print(result$ord.res$samples)
print(result$ord.res$features)
print(result$cv.stats)

#extract from ordination result
samples_df <- as.data.frame(result$ord.res$samples)
samples_df$Label <- rownames(samples_df)
test_samples <- c("Sample8", "Sample9", "Sample10") 
samples_df$Set <- ifelse(samples_df$Label %in% test_samples, "Test", "Train")

features_df <- as.data.frame(result$ord.res$features)
features_df$Label <- rownames(features_df)

#plot
ggplot(samples_df, aes(x = PC1, y = PC2, color = Set)) +
  geom_point(size = 3) +
  geom_text(aes(label = Label), vjust = -1.2) +
  theme_minimal() +
  scale_color_manual(values = c("Train" = "steelblue", "Test" = "tomato")) +
  labs(title = "Joint RPCA Sample Ordination", x = "PC1", y = "PC2")

#extract loadings matrix
loadings <- result$ord.res$features

#for each PC, rank features by absolute contribution
ranked_features <- lapply(colnames(loadings), function(pc) {
  df <- data.frame(Feature = rownames(loadings),
                   Loading = loadings[, pc],
                   AbsLoading = abs(loadings[, pc]))
  df <- df[order(-df$AbsLoading), ]
  rownames(df) <- NULL
  df
})
names(ranked_features) <- colnames(loadings)

head(ranked_features$PC1, 5)  #top 5 for PC1
head(ranked_features$PC2, 5)  #top 5 for PC2

top_PC1 <- head(ranked_features$PC1, 10)

ggplot(top_PC1, aes(x = reorder(Feature, AbsLoading), y = AbsLoading)) +
  geom_col(fill = "darkslateblue") +
  coord_flip() +
  labs(title = "Top Features Driving PC1",
       x = NULL, y = "Absolute Loading")

#COVARIANCE MATRIX

numeric_loadings <- as.matrix(features_df[, c("PC1", "PC2")])

#cross-product of feature loadings
cov_matrix <- tcrossprod(numeric_loadings)

print(cov_matrix)


# Example using MAE from mia::HintikkaXOData

data(HintikkaXOData)

#run wrapper on MAE object
result <- jointRPCAmae(
  mae = HintikkaXOData,
  n.components = 2,
  train.test.column = "Set",
  rclr.transform.tables = TRUE,
  max.iterations = 5
)

#extract sample and feature scores
samples_df <- as.data.frame(result$ord.res$samples)
samples_df$Label <- rownames(samples_df)

#get test/train labels from metadata
sample_metadata <- as.data.frame(SummarizedExperiment::colData(HintikkaXOData))
sample_metadata$Label <- rownames(sample_metadata)

#manually tag samples as train/test
sample_metadata$Set <- c(rep("train", 7), rep("test", nrow(sample_metadata) - 7))

#merge with ordination scores
samples_df <- merge(samples_df, sample_metadata[, c("Label", "Set")],
                    by = "Label", all.x = TRUE)

#feature scores
features_df <- as.data.frame(result$ord.res$features)
features_df$Label <- rownames(features_df)

#sample ordination plot
ggplot(samples_df, aes(x = PC1, y = PC2, color = Set)) +
  geom_point(size = 3) +
  geom_text(aes(label = Label), vjust = -1.2) +
  theme_minimal() +
  scale_color_manual(values = c("train" = "steelblue", "test" = "tomato")) +
  labs(title = "Joint RPCA Ordination on HintikkaXOData", x = "PC1", y = "PC2")

# Feature Importance Analysis

#rank features by contribution
loadings <- result$ord.res$features

ranked_features <- lapply(colnames(loadings), function(pc) {
  df <- data.frame(
    Feature = rownames(loadings),
    Loading = loadings[, pc],
    AbsLoading = abs(loadings[, pc])
  )
  df <- df[order(-df$AbsLoading), ]
  rownames(df) <- NULL
  df
})
names(ranked_features) <- colnames(loadings)

#view top features
head(ranked_features$PC1, 5)
head(ranked_features$PC2, 5)

# Visualize Top Features Driving PC1

top_PC1 <- head(ranked_features$PC1, 10)

ggplot(top_PC1, aes(x = reorder(Feature, AbsLoading), y = AbsLoading)) +
  geom_col(fill = "darkslateblue") +
  coord_flip() +
  labs(title = "Top Features Driving PC1 in HintikkaXOData",
       x = NULL, y = "Absolute Loading")

# Covariance Matrix of Feature Loadings

numeric_loadings <- as.matrix(features_df[, c("PC1", "PC2")])
cov_matrix <- tcrossprod(numeric_loadings)

```
