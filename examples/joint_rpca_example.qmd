---
title: "Joint RPCA Reproducible Example"
format: html
editor: visual
---

```{r setup, message=FALSE, warning=FALSE}
options(warn = -1)
# Load user-defined functions
source("../R/dependencies.R")
source("../R/jointRPCA.R")
source("../R/jointRPCAuniversal.R")
source("../R/jointOptspaceHelper.R")
source("../R/jointOptspaceSolve.R")
source("../R/optspaceHelper.R")
source("../R/transformHelper.R")
source("../R/transform.R")
source("../R/maskValueOnly.R")
source("../R/rpcaTableProcessing.R")
source("../R/jointRPCAutils.R")

# Load Data and Run Joint RPCA

# Example using MAE from mia::HintikkaXOData

# Load example data
data(HintikkaXOData)

# Run joint RPCA on MultiAssayExperiment object
result <- jointRPCAuniversal(
  data = HintikkaXOData,
  n.components = 3,
  train.test.column = "Set",
  rclr.transform.tables = TRUE,
  max.iterations = 5
)

# Compute and Store Sample Scores

# Compute dataset-specific sample scores
rclr.tables <- result$rclr.tables
dataset_specific_scores <- .dataset_specific_scores(rclr.tables, n.components = 3, max.iterations = 5)

# Store dataset-specific sample scores per experiment
for (i in seq_along(dataset_specific_scores)) {
  experiment_name <- names(HintikkaXOData)[i]
  reducedDim(HintikkaXOData[[experiment_name]], "localRPCA") <- dataset_specific_scores[[i]]
}

# View dataset-specific sample scores
for (name in names(HintikkaXOData)) {
  cat("\nSample Scores for:", name, "\n")
  print(head(reducedDim(HintikkaXOData[[name]], "localRPCA")))
}

# Store joint RPCA sample scores in taxonomic experiment
reducedDim(HintikkaXOData[["microbiota"]], "jointRPCA") <- result$ord.res$samples

# View joint RPCA sample scores
head(reducedDim(HintikkaXOData[["microbiota"]], "jointRPCA"))

# Compute and Store Feature Loadings

# Compute dataset-specific feature loadings
dataset_specific_loadings <- .dataset_specific_loadings(rclr.tables, n.components = 3, max.iterations = 5)

# Store dataset-specific feature loadings per experiment
for (i in seq_along(dataset_specific_loadings)) {
  experiment_name <- names(HintikkaXOData)[i]
  metadata(HintikkaXOData[[experiment_name]])$localRPCA_feature_loadings <- dataset_specific_loadings[[i]]
}

# View dataset-specific feature loadings per experiment
for (name in names(HintikkaXOData)) {
  cat("\nFeature Loadings for:", name, "\n")
  print(head(metadata(HintikkaXOData[[name]])$localRPCA_feature_loadings))
}

# Store joint feature loadings
metadata(HintikkaXOData[["microbiota"]])$jointRPCA_feature_loadings <- result$ord.res$features

# View joint feature loadings
head(metadata(HintikkaXOData[["microbiota"]])$jointRPCA_feature_loadings)

# Benchmarking

#create label vector
labels <- colData(HintikkaXOData)$Diet

#prepare different input feature sets

#prepare Joint-RPCA sample scores as an input feature set
features_jointRPCA <- result$ord.res$samples

#prepare PCA on the concatenation of rCLR-transformed matrices as an input feature set
common_samples <- Reduce(intersect, lapply(result$rclr.tables, rownames))
rclr.tables.sub <- lapply(result$rclr.tables, function(tbl) tbl[common_samples, ])
features_concat <- do.call(cbind, rclr.tables.sub)
features_concat_pca <- prcomp(features_concat, center = TRUE, scale. = TRUE)$x[, 1:10]

#prepare RPCA sample scores per omic, then concatenated, as an input feature set
features_rpca_concat <- do.call(cbind, dataset_specific_scores)

#prepare PCA sample scores per omic, then concatenated, as an input feature set
dataset_specific_pca_scores <- lapply(result$rclr.tables, function(tbl) {
  pca <- prcomp(tbl, center = TRUE, scale. = TRUE)
  pca$x[, 1:3] 
})

features_pca_concat <- do.call(cbind, dataset_specific_pca_scores)

#prepare randomly generated features as an input feature set
set.seed(42)
features_random <- matrix(runif(length(labels) * 10), ncol = 10)

#create a classification function (Random Forest)
evaluate_model <- function(features, labels) {
  rf_model <- randomForest(x = features, y = as.factor(labels), ntree = 500)
  pred <- predict(rf_model, features, type = "prob")[, 2]
  auc <- auc(labels, pred)
  acc <- mean(predict(rf_model, features) == labels)
  return(list(accuracy = acc, auc = auc))
}

#evaluate all methods
res_joint <- evaluate_model(features_jointRPCA, labels)
res_concat <- evaluate_model(features_concat_pca, labels)
res_rpca <- evaluate_model(features_rpca_concat, labels)
res_pca <- evaluate_model(features_pca_concat, labels)
res_random <- evaluate_model(features_random, labels)

#create and print a summary table
results_df <- data.frame(
  Method = c("Joint-RPCA", "Concat + PCA", "Per-layer RPCA", "Per-layer PCA", "Random"),
  Accuracy = c(res_joint$accuracy, res_concat$accuracy, res_rpca$accuracy, res_pca$accuracy, res_random$accuracy),
  AUC = c(res_joint$auc, res_concat$auc, res_rpca$auc, res_pca$auc, res_random$auc)
)

print(results_df)

```
