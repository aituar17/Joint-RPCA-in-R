---
title: "Joint RPCA Reproducible Example"
format: html
editor: visual
---

```{r setup, message=FALSE, warning=FALSE}
options(warn = -1)
# Load user-defined functions
source("../R/dependencies.R")
source("../R/jointRPCA.R")
source("../R/jointRPCAuniversal.R")
source("../R/jointOptspaceHelper.R")
source("../R/jointOptspaceSolve.R")
source("../R/optspaceHelper.R")
source("../R/transformHelper.R")
source("../R/transform.R")
source("../R/maskValueOnly.R")
source("../R/rpcaTableProcessing.R")
source("../R/jointRPCAutils.R")

# Load Data and Run Joint RPCA

# Example using MAE from mia::HintikkaXOData

# Load example data
data(HintikkaXOData)

# Run joint RPCA on MultiAssayExperiment object
result <- jointRPCAuniversal(
  data = HintikkaXOData,
  n.components = 3,
  train.test.column = "Set",
  rclr.transform.tables = TRUE,
  max.iterations = 5
)

# Compute and Store Sample Scores

# Compute dataset-specific sample scores
rclr.tables <- result$rclr.tables
dataset_specific_scores <- .dataset_specific_scores(rclr.tables, n.components = 3, max.iterations = 5)

# Store dataset-specific sample scores per experiment
for (i in seq_along(dataset_specific_scores)) {
  experiment_name <- names(HintikkaXOData)[i]
  reducedDim(HintikkaXOData[[experiment_name]], "localRPCA") <- dataset_specific_scores[[i]]
}

# View dataset-specific sample scores
for (name in names(HintikkaXOData)) {
  cat("\nSample Scores for:", name, "\n")
  print(head(reducedDim(HintikkaXOData[[name]], "localRPCA")))
}

# Store joint RPCA sample scores in taxonomic experiment
reducedDim(HintikkaXOData[["microbiota"]], "jointRPCA") <- result$ord.res$samples

# View joint RPCA sample scores
head(reducedDim(HintikkaXOData[["microbiota"]], "jointRPCA"))

# Compute and Store Feature Loadings

# Compute dataset-specific feature loadings
dataset_specific_loadings <- .dataset_specific_loadings(rclr.tables, n.components = 3, max.iterations = 5)

# Store dataset-specific feature loadings per experiment
for (i in seq_along(dataset_specific_loadings)) {
  experiment_name <- names(HintikkaXOData)[i]
  metadata(HintikkaXOData[[experiment_name]])$localRPCA_feature_loadings <- dataset_specific_loadings[[i]]
}

# View dataset-specific feature loadings per experiment
for (name in names(HintikkaXOData)) {
  cat("\nFeature Loadings for:", name, "\n")
  print(head(metadata(HintikkaXOData[[name]])$localRPCA_feature_loadings))
}

# Store joint feature loadings
metadata(HintikkaXOData[["microbiota"]])$jointRPCA_feature_loadings <- result$ord.res$features

# View joint feature loadings
head(metadata(HintikkaXOData[["microbiota"]])$jointRPCA_feature_loadings)

# Benchmarking

#create label vector
labels <- colData(HintikkaXOData)$Diet

#prepare different input feature sets

#prepare Joint-RPCA sample scores as an input feature set
features_jointRPCA <- result$ord.res$samples

#prepare raw rclr-transformed features per omic, then concatenated, as an input feature set
features_rclr_concat <- do.call(cbind, lapply(result$rclr.tables, t))
features_rclr_concat <- features_rclr_concat[, colSums(is.na(features_rclr_concat)) == 0]

#prepare PCA sample scores per omic, then concatenated, as an input feature set
features_pca_concat <- prcomp(features_rclr_concat)$x[, 1:3]

#prepare RPCA sample scores per omic, then concatenated, as an input feature set
features_rpca_concat <- do.call(cbind, dataset_specific_scores)

#prepare MOFA+ latent factors as an input feature set
mofa_data <- result$rclr.tables
common_samples <- Reduce(intersect, lapply(result$rclr.tables, colnames))
mofa_data <- lapply(result$rclr.tables, function(tbl) {
  tbl <- tbl[, common_samples, drop = FALSE]  
  t(tbl)  
})
mofa_object <- create_mofa(mofa_data)
data_opts <- get_default_data_options(mofa_object)
model_opts <- get_default_model_options(mofa_object)
train_opts <- get_default_training_options(mofa_object)
train_opts$maxiter <- 1000
mofa_prep <- prepare_mofa(
  object = mofa_object,
  data_options = data_opts,
  model_options = model_opts,
  training_options = train_opts
)
mofa_trained <- run_mofa(mofa_prep)
factors_list <- get_factors(mofa_trained, factors = "all", as.data.frame = FALSE)
features_mofa <- factors_list[[1]]
labels_mofa <- labels[match(rownames(features_mofa), names(labels))]

#prepare randomly generated features as an input feature set
set.seed(42)
features_random <- matrix(runif(length(labels) * 10), ncol = 10)

#create a classification function (Random Forest)
evaluate_model_cv <- function(features, labels, folds = 5) {
  labels <- as.factor(labels)
  folds_idx <- createFolds(labels, k = folds, list = TRUE, returnTrain = FALSE)
  
  accs <- c()
  aucs <- c()
  
  for (i in seq_along(folds_idx)) {
    test_idx <- folds_idx[[i]]
    train_idx <- setdiff(seq_along(labels), test_idx)
    
    rf_model <- randomForest(x = features[train_idx, ], y = labels[train_idx], ntree = 500)
    pred_class <- predict(rf_model, features[test_idx, ])
    acc <- mean(pred_class == labels[test_idx])
    
    pred_probs <- predict(rf_model, features[test_idx, ], type = "prob")
    auc <- multiclass.roc(labels[test_idx], pred_probs)$auc
    
    accs <- c(accs, acc)
    aucs <- c(aucs, auc)
  }
  
  return(list(accuracy = mean(accs), auc = mean(aucs)))
}

#evaluate all methods
res_joint <- evaluate_model_cv(features_jointRPCA, labels)
res_rclr <- evaluate_model_cv(features_rclr_concat, labels)
res_pca <- evaluate_model_cv(features_pca_concat, labels)
res_rpca <- evaluate_model_cv(features_rpca_concat, labels)
res_mofa <- evaluate_model_cv(features_mofa, labels_mofa)
res_random <- evaluate_model_cv(features_random, labels)

#create and print a summary table
results_df <- data.frame(
  Method = c("Joint-RPCA", "Raw rCLR-Transformed Features", "Per-layer PCA", "Per-layer RPCA", "MOFA+", "Random"),
  Accuracy = c(res_joint$accuracy, res_rclr$accuracy, res_pca$accuracy, res_rpca$accuracy, res_mofa$accuracy, res_random$accuracy),
  AUC = c(res_joint$auc, res_rclr$auc, res_pca$auc, res_rpca$auc, res_mofa$auc, res_random$auc)
)



```
